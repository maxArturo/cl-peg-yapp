# PEG simplified
#
# This is the flavor of PEG that `cl-peg-yapp` works with. 
# It's simplified from the more hardcore PEGN for my use cases.
# 
# Note that the following char classes are predefined in the
# parser for convenience: 
#
# numeric: [0-9]
# alpha: [A-Za-z]
# alphanum [A-Za-z0-9]
#
# An implicit definition of the `Spacing` rule is that all
# definitions must be terminated with a newline. However, 
# comments and arbitrary amounts of newlines are accepted for
# indentation and clarity.

Grammar    <- ComEndLine* (Definition ComEndLine*)+


ComEndLine <- ' '* ('# ' Comment)? EndLine
Comment    <- (!EndLine alphanum)+
Spacing    <- ComEndLine? ' '+
EndLine    <-   u000D         # CR
              / u000A         # LF
              / (u000D u000A)

# Definition section

Definition <- CheckId ' '+ '<-' ' '+ Expression
Expression <- Sequence (Spacing* '/' ' '* Sequence)*

CheckId    <- ([A-Z] [a-z]+)+
Sequence   <- Rule (Spacing Rule)*
Rule       <- PosLook / NegLook / Plain
PosLook    <- '&' Primary Quant?
NegLook    <- '!' Primary Quant?
Plain      <- Primary Quant?

Primary    <- Simple / CheckId / '(' Expression ')'

Simple     <- '[' (!']' ( (alphanum '-' alphanum) / alphanum) )+ ']'

Quant      <- Optional / MinZero / MinOne / MinMax / Amount

Optional   <- '?'
MinZero    <- '*'
MinOne     <- '+'
MinMax     <- '{' numeric+ ',' numeric+ '}'
Amount     <- '{' numeric+ '}'

