# PEGN (v1.0.0-alpha) spec.pegn.dev
# Copyright 2020 Robert S Muhlestein (rwx@robs.io)
# Licensed under Mozilla Public License 2.0
# Uses spec.pegn.dev/classes
# Uses spec.pegn.dev/tokens

# NOTE: assumes scanning by at least one byte at a time

Spec       <-- Meta? Copyright? Licensed? Uses*
               ComEndLine*
               (Definition ComEndLine*)+

Meta       <-- '# ' Grammar ' (' Version ') ' Home EndLine
Copyright  <-- '# Copyright ' Comment EndLine
Licensed   <-- '# Licensed under ' Comment EndLine
Uses       <-- '# Uses ' Path EndLine
Path       <-- (!ws unipoint)+
ComEndLine  <- SP* ('# ' Comment)? EndLine
Definition  <- NodeDef / ScanDef / ClassDef / TokenDef

Grammar     <- Name ('-' NameExt)?
Version     <- 'v' MajorVer '.' MinorVer '.' PatchVer ('-' PreVer)?
Home       <-- (!ws unipoint)+

Comment    <-- (!EndLine unipoint)+

ScanDef    <-- CheckId SP+ '<-'  SP+ Expression 
ClassDef   <-- ClassId SP+ '<-' SP+ ClassExpr
TokenDef   <-- TokenId SP+ '<-' SP+ 
               TokenVal (Spacing TokenVal)*
               ComEndLine

# lower-case of identifier must be unique within grammar
Identifier  <- CheckId / ClassId / TokenId

TokenVal    <- Unicode / Binary / Hexadec / Octal / SQ String SQ

Name       <-- upper{2,12}
NameExt    <-- visible{1,20}

MajorVer   <-- digit+
MinorVer   <-- digit+
PatchVer   <-- digit+
PreVer     <-- (word / DASH)+ ('.' (word / DASH)+)*

CheckId    <-- (upper lower+)+
ClassId    <-- ResClassId / lower (lower / UNDER lower)+
TokenId    <-- ResTokenId / upper (upper / UNDER upper)+

ClassExpr  <-- Simple (Spacing '/' SP+ Simple)*

# implemented in literal.lisp
Simple      <- Unicode / Binary / Hexadec / Octal 
             / ClassId / TokenId / Range / SQ String SQ

Spacing     <- ComEndLine? SP+

# Sequence section 
# implemented in sequence.lisp
Expression <-- Sequence (Spacing '/' SP+ Sequence)*
Sequence   <-- Rule (Spacing Rule)*
Rule        <- PosLook / NegLook / Plain
Plain      <-- Primary Quant?
PosLook    <-- '&' Primary Quant?
NegLook    <-- '!' Primary Quant?
Primary     <- Simple / CheckId / '(' Expression ')'

# implemented in quant.lisp
Quant       <- Optional / MinZero / MinOne / MinMax / Amount
Optional   <-- '?'
MinZero    <-- '*'
MinOne     <-- '+'
MinMax     <-- '{' Min ',' Max? '}'
Min        <-- digit+
Max        <-- digit+
Amount      <- '{' Count '}'
Count      <-- digit+

# implemented in literal.lisp
Range       <- AlphaRange / IntRange / UniRange
             / BinRange / HexRange / OctRange

UniRange   <-- '[' Unicode '-' Unicode ']'  # [u0000-u10FFFF]
AlphaRange <-- '[' Letter '-' Letter ']'    # [a-m] [A-Z]
IntRange   <-- '[' Integer '-' Integer ']'  # [0-108] [0-9]
BinRange   <-- '[' Binary '-' Binary ']'    # [b101-b1111111110101010]
HexRange   <-- '[' Hexadec '-' Hexadec ']'  # [x20-x2F] [xFFFFF - x1FFFFF]
OctRange   <-- '[' Octal '-' Octal ']'      # [o20-o37]

String     <-- quotable+
Letter     <-- alpha
Unicode    <-- 'u' ('10' uphex{4} / uphex{4,5})
Integer    <-- digit+
Binary     <-- 'b' bindig+  # b1 == b00000001 (0 pad to closest byte)
Hexadec    <-- 'x' uphex+
Octal      <-- 'o' octdig+

EndLine    <-- LF / CRLF / CR

ResClassId <-- 'alphanum' / 'alpha' / 'any' / 'bindig' / 'control' 
             / 'digit' / 'hexdig' / 'lowerhex' / 'lower' / 'octdig' 
             / 'punct' / 'quotable' / 'sign' / 'uphex' / 'upper' 
             / 'visible' / 'ws' / 'alnum' / 'ascii' / 'blank' / 'cntrl' 
             / 'graph' / 'print' / 'space' / 'word' / 'xdigit' / 'unipoint'

ResTokenId <-- 'TAB' / 'CRLF' / 'CR' / 'LFAT' / 'SP' / 'VT' / 'FF' / 'NOT'
             / 'BANG' / 'DQ' / 'HASH' / 'DOLLAR' / 'PERCENT' / 'AND' 
             / 'SQ' / 'LPAREN' / 'RPAREN' / 'STAR' / 'PLUS' / 'COMMA'
             / 'DASH' / 'MINUS' / 'DOT' / 'SLASH' / 'COLON' / 'SEMI' / 'LT'
             / 'EQ' / 'GT' / 'QUERY' / 'QUESTION' / 'AT' / 'LBRAKT'
             / 'BKSLASH' / 'RBRAKT' / 'CARET' / 'UNDER' / 'BKTICK' 
             / 'LCURLY' / 'LBRACE' / 'BAR' / 'PIPE' / 'RCURLY' 
             / 'RBRACE' / 'TILDE' / 'UNKNOWN' / 'REPLACE' / 'MAXRUNE' 
             / 'MAXASCII' / 'MAXLATIN' / 'LARROWF' / 'RARROWF' / 'LLARROW'
             / 'RLARROW' / 'LARROW' / 'LF' / 'RARROW' / 'RFAT' 
             / 'WALRUS' / 'ENDOFDATA'
