name: CI/testing

# Controls when the action will run. Triggers the workflow on push for any branch, and
# pull requests to master
on:
  push
  # push:
  # pull_request:
  #   branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: ${{ matrix.lisp }} on ${{ matrix.os }}
    strategy:
      matrix:
        # current ccl-bin has a flaky zip file, so roswell can't install it.
        # Specify a version that works for now.
        lisp: [sbcl-bin]
        # lisp: [sbcl-bin, ccl-bin/1.12]
        os: [ubuntu-latest]
        # os: [windows-latest, ubuntu-latest, macos-latest]

    # run the job on every combination of "lisp" and "os" above
    runs-on: ${{ matrix.os }}

    # default to msys2 shell on windows, since roswell install-for-ci.sh tries to install using pacman
    defaults:
      run:
        shell: ${{ fromJSON('[ "bash", "msys2 {0}" ]') [ matrix.os == 'windows-latest' ] }}

    steps:
      - name: set up non-windows env vars
        if: matrix.os != 'windows-latest'
        run: |
          echo "ROSWELL_INSTALL_DIR=$HOME/.roswell" >> "$GITHUB_ENV"
          echo "PATH=$HOME/.roswell/bin:$PATH" >> "$GITHUB_ENV"
      # use setup-msys2
      - uses: msys2/setup-msys2@v2
        if: matrix.os == 'windows-latest'
        with:
          path-type: inherit
          # list any extra packages we want installed

          # for example the following would be enough for us to build sbcl
          # from git:
          # install: 'git base-devel unzip mingw-w64-x86_64-gcc mingw64/mingw-w64-x86_64-zlib'

      # tell git not to convert line endings
      # change roswell install dir and add it to path
      - name: windows specific settings
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          echo "ROSWELL_INSTALL_DIR=$HOME/ros" >> $GITHUB_ENV
          echo "$HOME/ros/bin" >> $GITHUB_PATH

      - uses: actions/checkout@v4

      - name: restore cached roswell
        id: cache-roswell-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.roswell
            ~/.config/common-lisp
          key: ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-${{ hashFiles('**/*.asd') }}
          restore-keys: |
            ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-
            ${{ runner.os }}-dot-roswell-

      - name: install roswell and other dependencies
        if: steps.cache-roswell-restore.outputs.cache-hit != 'true'
        env:
          LISP: ${{ matrix.lisp }}
        run: |
          curl -L https://raw.githubusercontent.com/roswell/roswell/master/scripts/install-for-ci.sh | sh -x
          ros install ci-utils
          ros -e '(format t "~a:~a on ~a~%...~%~%" (lisp-implementation-type) (lisp-implementation-version) (machine-type))'
          ros -e '(format t " fixnum bits:~a~%" (integer-length most-positive-fixnum))'
          ros -e "(ql:quickload 'trivial-features)" -e '(format t "features = ~s~%" *features*)'
          # update ql dists if needed
          ros -e "(ql:update-all-dists :prompt nil)"

      - name: run the actual tests
        run: |
          run-fiveam -e t -l cl-peg-yapp "'cl-peg-yapp:peg-suite"

      - name: cache roswell install
        id: cache-roswell-save
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.roswell
            ~/.config/common-lisp
          key: ${{ steps.cache-roswell-restore.outputs.cache-primary-key }}
