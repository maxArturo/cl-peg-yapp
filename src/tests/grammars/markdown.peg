# Rough mirror of the definition at 
# https://github.com/jgm/peg-markdown/blob/master/markdown_parser.leg
# Only modified for compatibility: removes local var assignment and incompatible 
# parsing chars `<`, `>`, etc. introduced with leg version.

Doc <-       BOM? Block*

Block <-     BlankLine* (BlockQuote
              /  Verbatim
              /  Note
              /  Reference
              /  HorizontalRule
              /  Heading
              /  OrderedList
              /  BulletList
              /  HtmlBlock
              /  StyleBlock
              /  Para
              /  Plain)
 
 Para <-      NonindentSpace Inlines BlankLine+
 
 Plain <-     Inlines
 
 AtxInline <- !Newline !(Sp '#'* Sp Newline) Inline
 
 AtxStart <-  ('######' / '#####' / '####' / '###' / '##' / '#')
 
 AtxHeading <- AtxStart Sp StartList AtxInline+ (Sp '#'* Sp)?  Newline
 
 SetextHeading <- SetextHeading1 / SetextHeading2
 
 SetextBottom1 <- '='+ Newline

 SetextBottom2 <- '-'+ Newline
 
 SetextHeading1 <- (&(RawLine SetextBottom1) 
                   StartList (!Endline Inline)+ Sp Newline SetextBottom1)
 
 SetextHeading2 <- (&(RawLine SetextBottom2)
                   StartList (!Endline Inline)+ Sp Newline
                   SetextBottom2)
 
 Heading <- SetextHeading / AtxHeading
 
 BlockQuote <- BlockQuoteRaw
 
 BlockQuoteRaw <-  StartList (( '>' ' '? Line)
                   ( !'>' !BlankLine Line)*
                   ( BlankLine)*)+
 
 NonblankIndentedLine <- !BlankLine IndentedLine
 
 VerbatimChunk <- (StartList
                 BlankLine*
                 NonblankIndentedLine+)
 
 Verbatim <-  StartList VerbatimChunk+
 
 HorizontalRule <- (NonindentSpace
                  ( '*' Sp '*' Sp '*' (Sp '*')*
                  / '-' Sp '-' Sp '-' (Sp '-')*
                  / '_' Sp '_' Sp '_' (Sp '_')*)
                  Sp Newline BlankLine+)
 
 Bullet <- !HorizontalRule NonindentSpace ('+' / '*' / '-') Spacechar+
 
 BulletList <- &Bullet (ListTight / ListLoose)
             
 
 ListTight <- (StartList
             ListItemTight+
             BlankLine* !(Bullet / Enumerator))
 
 ListLoose <- StartList
             (ListItem BlankLine*)+
             
 
 ListItem <-  (( Bullet / Enumerator )
             StartList
             ListBlock 
             ( ListContinuationBlock  )*)
 
 ListItemTight <- (
             ( Bullet / Enumerator )
             StartList
             ListBlock 
             ( !BlankLine
               ListContinuationBlock  )*
             !ListContinuationBlock)
 
 ListBlock <- (StartList
             !BlankLine Line 
             ( ListBlockLine  )*)
             
 
 ListContinuationBlock <- (StartList
                         BlankLine*
                         (Indent ListBlock)+)
                         
 Enumerator <- NonindentSpace [0-9]+ '.' Spacechar+
 
 OrderedList <- &Enumerator (ListTight / ListLoose)
               
 
 ListBlockLine <- (!BlankLine
                 !( Indent? (Bullet / Enumerator) )
                 !HorizontalRule
                 OptionallyIndentedLine)
 
# # Parsers for different kinds of block-level HTML content.
# # This is repetitive due to constraints of PEG grammar.

HtmlBlockOpenAddress <- '<' Spnl ('address' / 'ADDRESS') Spnl HtmlAttribute* '>'
HtmlBlockCloseAddress <- '<' Spnl '/' ('address' / 'ADDRESS') Spnl '>'
HtmlBlockAddress <- HtmlBlockOpenAddress (HtmlBlockAddress / !HtmlBlockCloseAddress .)* HtmlBlockCloseAddress

HtmlBlockOpenBlockquote <- '<' Spnl ('blockquote' / 'BLOCKQUOTE') Spnl HtmlAttribute* '>'
HtmlBlockCloseBlockquote <- '<' Spnl '/' ('blockquote' / 'BLOCKQUOTE') Spnl '>'
HtmlBlockBlockquote <- HtmlBlockOpenBlockquote (HtmlBlockBlockquote / !HtmlBlockCloseBlockquote .)* HtmlBlockCloseBlockquote

HtmlBlockOpenCenter <- '<' Spnl ('center' / 'CENTER') Spnl HtmlAttribute* '>'
HtmlBlockCloseCenter <- '<' Spnl '/' ('center' / 'CENTER') Spnl '>'
HtmlBlockCenter <- HtmlBlockOpenCenter (HtmlBlockCenter / !HtmlBlockCloseCenter .)* HtmlBlockCloseCenter

HtmlBlockOpenDir <- '<' Spnl ('dir' / 'DIR') Spnl HtmlAttribute* '>'
HtmlBlockCloseDir <- '<' Spnl '/' ('dir' / 'DIR') Spnl '>'
HtmlBlockDir <- HtmlBlockOpenDir (HtmlBlockDir / !HtmlBlockCloseDir .)* HtmlBlockCloseDir

HtmlBlockOpenDiv <- '<' Spnl ('div' / 'DIV') Spnl HtmlAttribute* '>'
HtmlBlockCloseDiv <- '<' Spnl '/' ('div' / 'DIV') Spnl '>'
HtmlBlockDiv <- HtmlBlockOpenDiv (HtmlBlockDiv / !HtmlBlockCloseDiv .)* HtmlBlockCloseDiv

HtmlBlockOpenDl <- '<' Spnl ('dl' / 'DL') Spnl HtmlAttribute* '>'
HtmlBlockCloseDl <- '<' Spnl '/' ('dl' / 'DL') Spnl '>'
HtmlBlockDl <- HtmlBlockOpenDl (HtmlBlockDl / !HtmlBlockCloseDl .)* HtmlBlockCloseDl

HtmlBlockOpenFieldset <- '<' Spnl ('fieldset' / 'FIELDSET') Spnl HtmlAttribute* '>'
HtmlBlockCloseFieldset <- '<' Spnl '/' ('fieldset' / 'FIELDSET') Spnl '>'
HtmlBlockFieldset <- HtmlBlockOpenFieldset (HtmlBlockFieldset / !HtmlBlockCloseFieldset .)* HtmlBlockCloseFieldset

HtmlBlockOpenForm <- '<' Spnl ('form' / 'FORM') Spnl HtmlAttribute* '>'
HtmlBlockCloseForm <- '<' Spnl '/' ('form' / 'FORM') Spnl '>'
HtmlBlockForm <- HtmlBlockOpenForm (HtmlBlockForm / !HtmlBlockCloseForm .)* HtmlBlockCloseForm

HtmlBlockOpenH1 <- '<' Spnl ('h1' / 'H1') Spnl HtmlAttribute* '>'
HtmlBlockCloseH1 <- '<' Spnl '/' ('h1' / 'H1') Spnl '>'
HtmlBlockH1 <- HtmlBlockOpenH1 (HtmlBlockH1 / !HtmlBlockCloseH1 .)* HtmlBlockCloseH1

HtmlBlockOpenH2 <- '<' Spnl ('h2' / 'H2') Spnl HtmlAttribute* '>'
HtmlBlockCloseH2 <- '<' Spnl '/' ('h2' / 'H2') Spnl '>'
HtmlBlockH2 <- HtmlBlockOpenH2 (HtmlBlockH2 / !HtmlBlockCloseH2 .)* HtmlBlockCloseH2

HtmlBlockOpenH3 <- '<' Spnl ('h3' / 'H3') Spnl HtmlAttribute* '>'
HtmlBlockCloseH3 <- '<' Spnl '/' ('h3' / 'H3') Spnl '>'
HtmlBlockH3 <- HtmlBlockOpenH3 (HtmlBlockH3 / !HtmlBlockCloseH3 .)* HtmlBlockCloseH3

HtmlBlockOpenH4 <- '<' Spnl ('h4' / 'H4') Spnl HtmlAttribute* '>'
HtmlBlockCloseH4 <- '<' Spnl '/' ('h4' / 'H4') Spnl '>'
HtmlBlockH4 <- HtmlBlockOpenH4 (HtmlBlockH4 / !HtmlBlockCloseH4 .)* HtmlBlockCloseH4

HtmlBlockOpenH5 <- '<' Spnl ('h5' / 'H5') Spnl HtmlAttribute* '>'
HtmlBlockCloseH5 <- '<' Spnl '/' ('h5' / 'H5') Spnl '>'
HtmlBlockH5 <- HtmlBlockOpenH5 (HtmlBlockH5 / !HtmlBlockCloseH5 .)* HtmlBlockCloseH5

HtmlBlockOpenH6 <- '<' Spnl ('h6' / 'H6') Spnl HtmlAttribute* '>'
HtmlBlockCloseH6 <- '<' Spnl '/' ('h6' / 'H6') Spnl '>'
HtmlBlockH6 <- HtmlBlockOpenH6 (HtmlBlockH6 / !HtmlBlockCloseH6 .)* HtmlBlockCloseH6

HtmlBlockOpenMenu <- '<' Spnl ('menu' / 'MENU') Spnl HtmlAttribute* '>'
HtmlBlockCloseMenu <- '<' Spnl '/' ('menu' / 'MENU') Spnl '>'
HtmlBlockMenu <- HtmlBlockOpenMenu (HtmlBlockMenu / !HtmlBlockCloseMenu .)* HtmlBlockCloseMenu

HtmlBlockOpenNoframes <- '<' Spnl ('noframes' / 'NOFRAMES') Spnl HtmlAttribute* '>'
HtmlBlockCloseNoframes <- '<' Spnl '/' ('noframes' / 'NOFRAMES') Spnl '>'
HtmlBlockNoframes <- HtmlBlockOpenNoframes (HtmlBlockNoframes / !HtmlBlockCloseNoframes .)* HtmlBlockCloseNoframes

HtmlBlockOpenNoscript <- '<' Spnl ('noscript' / 'NOSCRIPT') Spnl HtmlAttribute* '>'
HtmlBlockCloseNoscript <- '<' Spnl '/' ('noscript' / 'NOSCRIPT') Spnl '>'
HtmlBlockNoscript <- HtmlBlockOpenNoscript (HtmlBlockNoscript / !HtmlBlockCloseNoscript .)* HtmlBlockCloseNoscript

HtmlBlockOpenOl <- '<' Spnl ('ol' / 'OL') Spnl HtmlAttribute* '>'
HtmlBlockCloseOl <- '<' Spnl '/' ('ol' / 'OL') Spnl '>'
HtmlBlockOl <- HtmlBlockOpenOl (HtmlBlockOl / !HtmlBlockCloseOl .)* HtmlBlockCloseOl

HtmlBlockOpenP <- '<' Spnl ('p' / 'P') Spnl HtmlAttribute* '>'
HtmlBlockCloseP <- '<' Spnl '/' ('p' / 'P') Spnl '>'
HtmlBlockP <- HtmlBlockOpenP (HtmlBlockP / !HtmlBlockCloseP .)* HtmlBlockCloseP

HtmlBlockOpenPre <- '<' Spnl ('pre' / 'PRE') Spnl HtmlAttribute* '>'
HtmlBlockClosePre <- '<' Spnl '/' ('pre' / 'PRE') Spnl '>'
HtmlBlockPre <- HtmlBlockOpenPre (HtmlBlockPre / !HtmlBlockClosePre .)* HtmlBlockClosePre

HtmlBlockOpenTable <- '<' Spnl ('table' / 'TABLE') Spnl HtmlAttribute* '>'
HtmlBlockCloseTable <- '<' Spnl '/' ('table' / 'TABLE') Spnl '>'
HtmlBlockTable <- HtmlBlockOpenTable (HtmlBlockTable / !HtmlBlockCloseTable .)* HtmlBlockCloseTable

HtmlBlockOpenUl <- '<' Spnl ('ul' / 'UL') Spnl HtmlAttribute* '>'
HtmlBlockCloseUl <- '<' Spnl '/' ('ul' / 'UL') Spnl '>'
HtmlBlockUl <- HtmlBlockOpenUl (HtmlBlockUl / !HtmlBlockCloseUl .)* HtmlBlockCloseUl

HtmlBlockOpenDd <- '<' Spnl ('dd' / 'DD') Spnl HtmlAttribute* '>'
HtmlBlockCloseDd <- '<' Spnl '/' ('dd' / 'DD') Spnl '>'
HtmlBlockDd <- HtmlBlockOpenDd (HtmlBlockDd / !HtmlBlockCloseDd .)* HtmlBlockCloseDd

HtmlBlockOpenDt <- '<' Spnl ('dt' / 'DT') Spnl HtmlAttribute* '>'
HtmlBlockCloseDt <- '<' Spnl '/' ('dt' / 'DT') Spnl '>'
HtmlBlockDt <- HtmlBlockOpenDt (HtmlBlockDt / !HtmlBlockCloseDt .)* HtmlBlockCloseDt

HtmlBlockOpenFrameset <- '<' Spnl ('frameset' / 'FRAMESET') Spnl HtmlAttribute* '>'
HtmlBlockCloseFrameset <- '<' Spnl '/' ('frameset' / 'FRAMESET') Spnl '>'
HtmlBlockFrameset <- HtmlBlockOpenFrameset (HtmlBlockFrameset / !HtmlBlockCloseFrameset .)* HtmlBlockCloseFrameset

HtmlBlockOpenLi <- '<' Spnl ('li' / 'LI') Spnl HtmlAttribute* '>'
HtmlBlockCloseLi <- '<' Spnl '/' ('li' / 'LI') Spnl '>'
HtmlBlockLi <- HtmlBlockOpenLi (HtmlBlockLi / !HtmlBlockCloseLi .)* HtmlBlockCloseLi

HtmlBlockOpenTbody <- '<' Spnl ('tbody' / 'TBODY') Spnl HtmlAttribute* '>'
HtmlBlockCloseTbody <- '<' Spnl '/' ('tbody' / 'TBODY') Spnl '>'
HtmlBlockTbody <- HtmlBlockOpenTbody (HtmlBlockTbody / !HtmlBlockCloseTbody .)* HtmlBlockCloseTbody

HtmlBlockOpenTd <- '<' Spnl ('td' / 'TD') Spnl HtmlAttribute* '>'
HtmlBlockCloseTd <- '<' Spnl '/' ('td' / 'TD') Spnl '>'
HtmlBlockTd <- HtmlBlockOpenTd (HtmlBlockTd / !HtmlBlockCloseTd .)* HtmlBlockCloseTd

HtmlBlockOpenTfoot <- '<' Spnl ('tfoot' / 'TFOOT') Spnl HtmlAttribute* '>'
HtmlBlockCloseTfoot <- '<' Spnl '/' ('tfoot' / 'TFOOT') Spnl '>'
HtmlBlockTfoot <- HtmlBlockOpenTfoot (HtmlBlockTfoot / !HtmlBlockCloseTfoot .)* HtmlBlockCloseTfoot

HtmlBlockOpenTh <- '<' Spnl ('th' / 'TH') Spnl HtmlAttribute* '>'
HtmlBlockCloseTh <- '<' Spnl '/' ('th' / 'TH') Spnl '>'
HtmlBlockTh <- HtmlBlockOpenTh (HtmlBlockTh / !HtmlBlockCloseTh .)* HtmlBlockCloseTh

HtmlBlockOpenThead <- '<' Spnl ('thead' / 'THEAD') Spnl HtmlAttribute* '>'
HtmlBlockCloseThead <- '<' Spnl '/' ('thead' / 'THEAD') Spnl '>'
HtmlBlockThead <- HtmlBlockOpenThead (HtmlBlockThead / !HtmlBlockCloseThead .)* HtmlBlockCloseThead

HtmlBlockOpenTr <- '<' Spnl ('tr' / 'TR') Spnl HtmlAttribute* '>'
HtmlBlockCloseTr <- '<' Spnl '/' ('tr' / 'TR') Spnl '>'
HtmlBlockTr <- HtmlBlockOpenTr (HtmlBlockTr / !HtmlBlockCloseTr .)* HtmlBlockCloseTr

HtmlBlockOpenScript <- '<' Spnl ('script' / 'SCRIPT') Spnl HtmlAttribute* '>'
HtmlBlockCloseScript <- '<' Spnl '/' ('script' / 'SCRIPT') Spnl '>'
HtmlBlockScript <- HtmlBlockOpenScript (!HtmlBlockCloseScript .)* HtmlBlockCloseScript

HtmlBlockOpenHead <- '<' Spnl ('head' / 'HEAD') Spnl HtmlAttribute* '>'
HtmlBlockCloseHead <- '<' Spnl '/' ('head' / 'HEAD') Spnl '>'
HtmlBlockHead <- HtmlBlockOpenHead (!HtmlBlockCloseHead .)* HtmlBlockCloseHead

HtmlBlockInTags <- HtmlBlockAddress
                / HtmlBlockBlockquote
                / HtmlBlockCenter
                / HtmlBlockDir
                / HtmlBlockDiv
                / HtmlBlockDl
                / HtmlBlockFieldset
                / HtmlBlockForm
                / HtmlBlockH1
                / HtmlBlockH2
                / HtmlBlockH3
                / HtmlBlockH4
                / HtmlBlockH5
                / HtmlBlockH6
                / HtmlBlockMenu
                / HtmlBlockNoframes
                / HtmlBlockNoscript
                / HtmlBlockOl
                / HtmlBlockP
                / HtmlBlockPre
                / HtmlBlockTable
                / HtmlBlockUl
                / HtmlBlockDd
                / HtmlBlockDt
                / HtmlBlockFrameset
                / HtmlBlockLi
                / HtmlBlockTbody
                / HtmlBlockTd
                / HtmlBlockTfoot
                / HtmlBlockTh
                / HtmlBlockThead
                / HtmlBlockTr
                / HtmlBlockScript
                / HtmlBlockHead

HtmlBlock <- ( HtmlBlockInTags / HtmlComment / HtmlBlockSelfClosing ) BlankLine+

HtmlBlockSelfClosing <- '<' Spnl HtmlBlockType Spnl HtmlAttribute* '/' Spnl '>'

HtmlBlockType <- 'address' / 'blockquote' / 'center' / 'dir' / 'div' / 'dl' / 'fieldset' / 'form' / 'h1' / 'h2' / 'h3' /
                'h4' / 'h5' / 'h6' / 'hr' / 'isindex' / 'menu' / 'noframes' / 'noscript' / 'ol' / 'p' / 'pre' / 'table' /
                'ul' / 'dd' / 'dt' / 'frameset' / 'li' / 'tbody' / 'td' / 'tfoot' / 'th' / 'thead' / 'tr' / 'script' /
                'ADDRESS' / 'BLOCKQUOTE' / 'CENTER' / 'DIR' / 'DIV' / 'DL' / 'FIELDSET' / 'FORM' / 'H1' / 'H2' / 'H3' /
                'H4' / 'H5' / 'H6' / 'HR' / 'ISINDEX' / 'MENU' / 'NOFRAMES' / 'NOSCRIPT' / 'OL' / 'P' / 'PRE' / 'TABLE' /
                'UL' / 'DD' / 'DT' / 'FRAMESET' / 'LI' / 'TBODY' / 'TD' / 'TFOOT' / 'TH' / 'THEAD' / 'TR' / 'SCRIPT'

StyleOpen <-     '<' Spnl ('style' / 'STYLE') Spnl HtmlAttribute* '>'
StyleClose <-    '<' Spnl '/' ('style' / 'STYLE') Spnl '>'
InStyleTags <-   StyleOpen (!StyleClose .)* StyleClose
StyleBlock <-    InStyleTags BlankLine*

Inlines  <-  StartList ( !Endline Inline 
                        / Endline &Inline  )+ Endline?

Inline  <- Str
        / Endline
        / UlOrStarLine
        / Space
        / Strong
        / Emph
        / Strike
        / Image
        / Link
        / NoteReference
        / InlineNote
        / Code
        / RawHtml
        / Entity
        / EscapedChar
        / Smart
        / Symbol

Space <- Spacechar+

Str <- StartList NormalChar+ StrChunk*

StrChunk <- (NormalChar / '_'+ &Alphanumeric)+ /
           AposChunk

AposChunk <- '\\\'' &Alphanumeric

EscapedChar <-   '\\\\' !Newline [-\\`|*_{}[\]()#+.!><]

Entity <-    ( HexEntity / DecEntity / CharEntity )
            

Endline <-   LineBreak / TerminalEndline / NormalEndline

NormalEndline <-   Sp Newline !BlankLine !'>' !AtxStart
                  !(Line ('='+ / '-'+) Newline)

TerminalEndline <- Sp Newline Eof
                  

LineBreak <- '  ' NormalEndline

 
Symbol <-    SpecialChar


# This keeps the parser from getting bogged down on long strings of '*' or '_',
# or strings of '*' or '_' with space on each side:

UlOrStarLine <-  (UlLine / StarLine) 

StarLine <-      '****' '*'* / Spacechar '*'+ &Spacechar
UlLine   <-      '____' '_'* / Spacechar '_'+ &Spacechar

Emph <-      EmphStar / EmphUl

Whitespace <- Spacechar / Newline

EmphStar <-  '*' !Whitespace (!'*' Inline / StrongStar)+ '*'

EmphUl <-    '_' !Whitespace (!'_' Inline / StrongUl)+ '_'

Strong <- StrongStar / StrongUl

StrongStar <-    '**' !Whitespace (!'**' Inline)+ '**'

StrongUl   <-    '__' !Whitespace ( !'__' Inline )+ '__'

Strike <- '~~' !Whitespace (!'~~' Inline)+ '~~'

Image <- '!' ( ExplicitLink / ReferenceLink )

Link <-  ExplicitLink / ReferenceLink / AutoLink

ReferenceLink <- ReferenceLinkDouble / ReferenceLinkSingle

ReferenceLinkDouble <-  Label Spnl !'[]' Label

ReferenceLinkSingle <-  Label (Spnl '[]')?

ExplicitLink <-  Label '(' Sp Source Spnl Title Sp ')'

Source  <- ( '<' SourceContents '>' / SourceContents )

SourceContents <- ( ( !'(' !')' !'>' Nonspacechar )+ / '(' SourceContents ')')*

Title <- ( TitleSingle / TitleDouble / '""')

TitleSingle <- "'" ( !( '\'' Sp ( ')' / Newline ) ) . )* "'"

TitleDouble <- '"' ( !( '"' Sp ( ')' / Newline ) ) . )* '"'

AutoLink <- AutoLinkUrl / AutoLinkEmail

AutoLinkUrl <-   '<' [A-Za-z]+ "://" ( !Newline !'>' . )+ '>'

AutoLinkEmail <- '<' ( "mailto:" )? [-A-Za-z0-9+_./!%~$]+ '@' ( !Newline !'>' . )+ '>'

Reference <- NonindentSpace !"[]" Label ':' Spnl RefSrc RefTitle BlankLine+

Label <- '[' !'^' StartList (!']' Inline)* ']'

RefSrc <- Nonspacechar+

RefTitle <-  ( RefTitleSingle / RefTitleDouble / RefTitleParens / EmptyTitle )

EmptyTitle <- &.

RefTitleSingle <- Spnl "'" ( !("'" Sp Newline / Newline ) . )* "'"

RefTitleDouble <- Spnl '"' (!('"' Sp Newline / Newline) . )* '"'

RefTitleParens <- Spnl '(' ( !(')' Sp Newline / Newline) . )* ')'

References <- StartList (Reference  / SkipBlock)*

Ticks1 <- "`" !'`'
Ticks2 <- "``" !'`'
Ticks3 <- "```" !'`'
Ticks4 <- "````" !'`'
Ticks5 <- "`````" !'`'

Code <- (Ticks1 Sp (( !'`' Nonspacechar )+ / !Ticks1 '`'+ / !( Sp Ticks1 ) ( Spacechar / Newline !BlankLine ) )+ Sp Ticks1
        / Ticks2 Sp ( ( !'`' Nonspacechar )+ / !Ticks2 '`'+ / !( Sp Ticks2 ) ( Spacechar / Newline !BlankLine ) )+ Sp Ticks2
        / Ticks3 Sp ( ( !'`' Nonspacechar )+ / !Ticks3 '`'+ / !( Sp Ticks3 ) ( Spacechar / Newline !BlankLine ) )+ Sp Ticks3
        / Ticks4 Sp ( ( !'`' Nonspacechar )+ / !Ticks4 '`'+ / !( Sp Ticks4 ) ( Spacechar / Newline !BlankLine ) )+ Sp Ticks4
        / Ticks5 Sp ( ( !'`' Nonspacechar )+ / !Ticks5 '`'+ / !( Sp Ticks5 ) ( Spacechar / Newline !BlankLine ) )+ Sp Ticks5
        )

RawHtml <-   (HtmlComment / HtmlBlockScript / HtmlTag)

BlankLine <-     Sp Newline

Quoted <-        '"' (!'"' .)* '"' / '\'' (!'\'' .)* '\''
HtmlAttribute <- (AlphanumericAscii / '-')+ Spnl ('=' Spnl (Quoted / (!'>' Nonspacechar)+))? Spnl
HtmlComment <-   "<!--" (!"-->" .)* "-->"
HtmlTag <-       '<' Spnl '/'? AlphanumericAscii+ Spnl HtmlAttribute* '/'? Spnl '>'
Eof <-           !.
Spacechar <-     ' ' / u0009 # tab char code
Nonspacechar <-  !Spacechar !Newline .
Newline <-  u000A  / (u000D u000A?)
Sp <-            Spacechar*
Spnl <-          Sp (Newline Sp)?
SpecialChar <-   '~' / '*' / '_' / '`' / '&' / '[' / ']' / '(' / ')' / '<' / '!' / '#' / '\\' / '\'' / '"' 
NormalChar <-    !( SpecialChar / Spacechar / Newline ) .
Alphanumeric <- [0-9A-Za-z] / u0200 / u0201 / u0202 / u0203 / u0204 / u0205 / u0206 / u0207 / u0210 / u0211 / u0212 / u0213 / u0214 / u0215 / u0216 / u0217 / u0220 / u0221 / u0222 / u0223 / u0224 / u0225 / u0226 / u0227 / u0230 / u0231 / u0232 / u0233 / u0234 / u0235 / u0236 / u0237 / u0240 / u0241 / u0242 / u0243 / u0244 / u0245 / u0246 / u0247 / u0250 / u0251 / u0252 / u0253 / u0254 / u0255 / u0256 / u0257 / u0260 / u0261 / u0262 / u0263 / u0264 / u0265 / u0266 / u0267 / u0270 / u0271 / u0272 / u0273 / u0274 / u0275 / u0276 / u0277 / u0300 / u0301 / u0302 / u0303 / u0304 / u0305 / u0306 / u0307 / u0310 / u0311 / u0312 / u0313 / u0314 / u0315 / u0316 / u0317 / u0320 / u0321 / u0322 / u0323 / u0324 / u0325 / u0326 / u0327 / u0330 / u0331 / u0332 / u0333 / u0334 / u0335 / u0336 / u0337 / u0340 / u0341 / u0342 / u0343 / u0344 / u0345 / u0346 / u0347 / u0350 / u0351 / u0352 / u0353 / u0354 / u0355 / u0356 / u0357 / u0360 / u0361 / u0362 / u0363 / u0364 / u0365 / u0366 / u0367 / u0370 / u0371 / u0372 / u0373 / u0374 / u0375 / u0376 / u0377
AlphanumericAscii <- [A-Za-z0-9]
Digit <- [0-9]
BOM <-  u0357 u0273 u0277
HexEntity <-     '&' '#' [Xx] [0-9a-fA-F]+ ';'
DecEntity <-     '&' '#' [0-9]+ ';'
CharEntity <-    '&' [A-Za-z0-9]+ ';'

# TODO make sure that these '&.' fillers for "" actually work as intended
# TODO there's another def where I did this, need to see across the whole grammar
NonindentSpace <-    "   " / "  " / " " / &.
Indent <-            u0009 / "    "
IndentedLine <-      Indent Line
OptionallyIndentedLine <- Indent? Line
# StartList starts a list data structure that can be added to with cons:
StartList <- &.
 
Line <-  RawLine

RawLine <- ( (!'\r' !'\n' .)* Newline / .+ Eof )

SkipBlock <- HtmlBlock
          / ( !'#' !SetextBottom1 !SetextBottom2 !BlankLine RawLine )+ BlankLine*
          / BlankLine+
          / RawLine

# Syntax extensions

Smart <- ( Ellipsis / Dash / SingleQuoted / DoubleQuoted / Apostrophe )

Apostrophe <- '\''

Ellipsis <- ("..." / ". . .")
 
Dash <- EmDash / EnDash

EnDash <- '-' &Digit

EmDash <- '---' / '--'

SingleQuoteStart <- '\'' !(Spacechar / Newline)

SingleQuoteEnd <- '\'' !Alphanumeric

SingleQuoted <- (SingleQuoteStart StartList
               (!SingleQuoteEnd Inline)+
               SingleQuoteEnd)

DoubleQuoteStart <- '"'

DoubleQuoteEnd <- '"'

DoubleQuoted <-  (DoubleQuoteStart
                StartList
                ( !DoubleQuoteEnd Inline)+
                DoubleQuoteEnd)

NoteReference <- RawNoteReference

RawNoteReference <- '[^' (!Newline !']' .)+ ']'

Note <-         (NonindentSpace RawNoteReference ':' Sp
                StartList
                RawNoteBlock
                ( &Indent RawNoteBlock)*)

InlineNote <-  (  "^["
                StartList
                (!']' Inline)+
                ']')

Notes <-         StartList
                (Note / SkipBlock )*
                

RawNoteBlock <-  StartList (!BlankLine OptionallyIndentedLine)+ BlankLine*

